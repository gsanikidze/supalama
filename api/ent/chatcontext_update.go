// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api/ent/chat"
	"api/ent/chatcontext"
	"api/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ChatContextUpdate is the builder for updating ChatContext entities.
type ChatContextUpdate struct {
	config
	hooks    []Hook
	mutation *ChatContextMutation
}

// Where appends a list predicates to the ChatContextUpdate builder.
func (ccu *ChatContextUpdate) Where(ps ...predicate.ChatContext) *ChatContextUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetData sets the "data" field.
func (ccu *ChatContextUpdate) SetData(i []int) *ChatContextUpdate {
	ccu.mutation.SetData(i)
	return ccu
}

// AppendData appends i to the "data" field.
func (ccu *ChatContextUpdate) AppendData(i []int) *ChatContextUpdate {
	ccu.mutation.AppendData(i)
	return ccu
}

// SetChatID sets the "chat" edge to the Chat entity by ID.
func (ccu *ChatContextUpdate) SetChatID(id int) *ChatContextUpdate {
	ccu.mutation.SetChatID(id)
	return ccu
}

// SetChat sets the "chat" edge to the Chat entity.
func (ccu *ChatContextUpdate) SetChat(c *Chat) *ChatContextUpdate {
	return ccu.SetChatID(c.ID)
}

// Mutation returns the ChatContextMutation object of the builder.
func (ccu *ChatContextUpdate) Mutation() *ChatContextMutation {
	return ccu.mutation
}

// ClearChat clears the "chat" edge to the Chat entity.
func (ccu *ChatContextUpdate) ClearChat() *ChatContextUpdate {
	ccu.mutation.ClearChat()
	return ccu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *ChatContextUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ccu.sqlSave, ccu.mutation, ccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *ChatContextUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *ChatContextUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *ChatContextUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccu *ChatContextUpdate) check() error {
	if _, ok := ccu.mutation.ChatID(); ccu.mutation.ChatCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ChatContext.chat"`)
	}
	return nil
}

func (ccu *ChatContextUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ccu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatcontext.Table, chatcontext.Columns, sqlgraph.NewFieldSpec(chatcontext.FieldID, field.TypeInt))
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.Data(); ok {
		_spec.SetField(chatcontext.FieldData, field.TypeJSON, value)
	}
	if value, ok := ccu.mutation.AppendedData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, chatcontext.FieldData, value)
		})
	}
	if ccu.mutation.ChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chatcontext.ChatTable,
			Columns: []string{chatcontext.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.ChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chatcontext.ChatTable,
			Columns: []string{chatcontext.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatcontext.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccu.mutation.done = true
	return n, nil
}

// ChatContextUpdateOne is the builder for updating a single ChatContext entity.
type ChatContextUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatContextMutation
}

// SetData sets the "data" field.
func (ccuo *ChatContextUpdateOne) SetData(i []int) *ChatContextUpdateOne {
	ccuo.mutation.SetData(i)
	return ccuo
}

// AppendData appends i to the "data" field.
func (ccuo *ChatContextUpdateOne) AppendData(i []int) *ChatContextUpdateOne {
	ccuo.mutation.AppendData(i)
	return ccuo
}

// SetChatID sets the "chat" edge to the Chat entity by ID.
func (ccuo *ChatContextUpdateOne) SetChatID(id int) *ChatContextUpdateOne {
	ccuo.mutation.SetChatID(id)
	return ccuo
}

// SetChat sets the "chat" edge to the Chat entity.
func (ccuo *ChatContextUpdateOne) SetChat(c *Chat) *ChatContextUpdateOne {
	return ccuo.SetChatID(c.ID)
}

// Mutation returns the ChatContextMutation object of the builder.
func (ccuo *ChatContextUpdateOne) Mutation() *ChatContextMutation {
	return ccuo.mutation
}

// ClearChat clears the "chat" edge to the Chat entity.
func (ccuo *ChatContextUpdateOne) ClearChat() *ChatContextUpdateOne {
	ccuo.mutation.ClearChat()
	return ccuo
}

// Where appends a list predicates to the ChatContextUpdate builder.
func (ccuo *ChatContextUpdateOne) Where(ps ...predicate.ChatContext) *ChatContextUpdateOne {
	ccuo.mutation.Where(ps...)
	return ccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *ChatContextUpdateOne) Select(field string, fields ...string) *ChatContextUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated ChatContext entity.
func (ccuo *ChatContextUpdateOne) Save(ctx context.Context) (*ChatContext, error) {
	return withHooks(ctx, ccuo.sqlSave, ccuo.mutation, ccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *ChatContextUpdateOne) SaveX(ctx context.Context) *ChatContext {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *ChatContextUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *ChatContextUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccuo *ChatContextUpdateOne) check() error {
	if _, ok := ccuo.mutation.ChatID(); ccuo.mutation.ChatCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ChatContext.chat"`)
	}
	return nil
}

func (ccuo *ChatContextUpdateOne) sqlSave(ctx context.Context) (_node *ChatContext, err error) {
	if err := ccuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatcontext.Table, chatcontext.Columns, sqlgraph.NewFieldSpec(chatcontext.FieldID, field.TypeInt))
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChatContext.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatcontext.FieldID)
		for _, f := range fields {
			if !chatcontext.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chatcontext.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.Data(); ok {
		_spec.SetField(chatcontext.FieldData, field.TypeJSON, value)
	}
	if value, ok := ccuo.mutation.AppendedData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, chatcontext.FieldData, value)
		})
	}
	if ccuo.mutation.ChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chatcontext.ChatTable,
			Columns: []string{chatcontext.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.ChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chatcontext.ChatTable,
			Columns: []string{chatcontext.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ChatContext{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatcontext.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccuo.mutation.done = true
	return _node, nil
}
