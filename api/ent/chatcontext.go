// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api/ent/chat"
	"api/ent/chatcontext"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ChatContext is the model entity for the ChatContext schema.
type ChatContext struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Data holds the value of the "data" field.
	Data []int `json:"data,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChatContextQuery when eager-loading is set.
	Edges        ChatContextEdges `json:"edges"`
	chat_context *int
	selectValues sql.SelectValues
}

// ChatContextEdges holds the relations/edges for other nodes in the graph.
type ChatContextEdges struct {
	// Chat holds the value of the chat edge.
	Chat *Chat `json:"chat,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ChatOrErr returns the Chat value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChatContextEdges) ChatOrErr() (*Chat, error) {
	if e.Chat != nil {
		return e.Chat, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: chat.Label}
	}
	return nil, &NotLoadedError{edge: "chat"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatContext) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatcontext.FieldData:
			values[i] = new([]byte)
		case chatcontext.FieldID:
			values[i] = new(sql.NullInt64)
		case chatcontext.ForeignKeys[0]: // chat_context
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatContext fields.
func (cc *ChatContext) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatcontext.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cc.ID = int(value.Int64)
		case chatcontext.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cc.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		case chatcontext.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field chat_context", value)
			} else if value.Valid {
				cc.chat_context = new(int)
				*cc.chat_context = int(value.Int64)
			}
		default:
			cc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChatContext.
// This includes values selected through modifiers, order, etc.
func (cc *ChatContext) Value(name string) (ent.Value, error) {
	return cc.selectValues.Get(name)
}

// QueryChat queries the "chat" edge of the ChatContext entity.
func (cc *ChatContext) QueryChat() *ChatQuery {
	return NewChatContextClient(cc.config).QueryChat(cc)
}

// Update returns a builder for updating this ChatContext.
// Note that you need to call ChatContext.Unwrap() before calling this method if this ChatContext
// was returned from a transaction, and the transaction was committed or rolled back.
func (cc *ChatContext) Update() *ChatContextUpdateOne {
	return NewChatContextClient(cc.config).UpdateOne(cc)
}

// Unwrap unwraps the ChatContext entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cc *ChatContext) Unwrap() *ChatContext {
	_tx, ok := cc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatContext is not a transactional entity")
	}
	cc.config.driver = _tx.drv
	return cc
}

// String implements the fmt.Stringer.
func (cc *ChatContext) String() string {
	var builder strings.Builder
	builder.WriteString("ChatContext(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cc.ID))
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", cc.Data))
	builder.WriteByte(')')
	return builder.String()
}

// ChatContexts is a parsable slice of ChatContext.
type ChatContexts []*ChatContext
