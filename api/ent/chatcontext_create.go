// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api/ent/chat"
	"api/ent/chatcontext"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChatContextCreate is the builder for creating a ChatContext entity.
type ChatContextCreate struct {
	config
	mutation *ChatContextMutation
	hooks    []Hook
}

// SetData sets the "data" field.
func (ccc *ChatContextCreate) SetData(i []int) *ChatContextCreate {
	ccc.mutation.SetData(i)
	return ccc
}

// SetChatID sets the "chat" edge to the Chat entity by ID.
func (ccc *ChatContextCreate) SetChatID(id int) *ChatContextCreate {
	ccc.mutation.SetChatID(id)
	return ccc
}

// SetChat sets the "chat" edge to the Chat entity.
func (ccc *ChatContextCreate) SetChat(c *Chat) *ChatContextCreate {
	return ccc.SetChatID(c.ID)
}

// Mutation returns the ChatContextMutation object of the builder.
func (ccc *ChatContextCreate) Mutation() *ChatContextMutation {
	return ccc.mutation
}

// Save creates the ChatContext in the database.
func (ccc *ChatContextCreate) Save(ctx context.Context) (*ChatContext, error) {
	ccc.defaults()
	return withHooks(ctx, ccc.sqlSave, ccc.mutation, ccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *ChatContextCreate) SaveX(ctx context.Context) *ChatContext {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *ChatContextCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *ChatContextCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccc *ChatContextCreate) defaults() {
	if _, ok := ccc.mutation.Data(); !ok {
		v := chatcontext.DefaultData
		ccc.mutation.SetData(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *ChatContextCreate) check() error {
	if _, ok := ccc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "ChatContext.data"`)}
	}
	if _, ok := ccc.mutation.ChatID(); !ok {
		return &ValidationError{Name: "chat", err: errors.New(`ent: missing required edge "ChatContext.chat"`)}
	}
	return nil
}

func (ccc *ChatContextCreate) sqlSave(ctx context.Context) (*ChatContext, error) {
	if err := ccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ccc.mutation.id = &_node.ID
	ccc.mutation.done = true
	return _node, nil
}

func (ccc *ChatContextCreate) createSpec() (*ChatContext, *sqlgraph.CreateSpec) {
	var (
		_node = &ChatContext{config: ccc.config}
		_spec = sqlgraph.NewCreateSpec(chatcontext.Table, sqlgraph.NewFieldSpec(chatcontext.FieldID, field.TypeInt))
	)
	if value, ok := ccc.mutation.Data(); ok {
		_spec.SetField(chatcontext.FieldData, field.TypeJSON, value)
		_node.Data = value
	}
	if nodes := ccc.mutation.ChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chatcontext.ChatTable,
			Columns: []string{chatcontext.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.chat_context = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChatContextCreateBulk is the builder for creating many ChatContext entities in bulk.
type ChatContextCreateBulk struct {
	config
	err      error
	builders []*ChatContextCreate
}

// Save creates the ChatContext entities in the database.
func (cccb *ChatContextCreateBulk) Save(ctx context.Context) ([]*ChatContext, error) {
	if cccb.err != nil {
		return nil, cccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*ChatContext, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChatContextMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *ChatContextCreateBulk) SaveX(ctx context.Context) []*ChatContext {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *ChatContextCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *ChatContextCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}
